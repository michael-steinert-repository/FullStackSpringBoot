{"version":3,"sources":["Container.js","Footer.js","client.js","forms/AddStudentForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","style","width","margin","textAlign","children","Footer","className","undefined","numberOfStudents","backgroundColor","marginRight","size","onClick","handleAddStudentClickEvent","type","checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","inputFieldMargin","marginBottom","tagStyle","color","AddStudentForm","initialValues","firstName","lastName","gender","email","validate","values","errors","includes","test","onSubmit","student","setSubmitting","headers","method","body","JSON","stringify","addNewStudent","onSuccess","catch","err","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","disabled","openNotification","message","description","notification","errorNotification","App","state","students","isFetching","isAddStudentModalVisible","openAddStudentModalVisible","setState","closeAddStudentModalVisible","fetchStudents","res","status","httpStatus","this","antIcon","LoadingOutlined","fontSize","spin","commonElements","title","visible","onOk","onCancel","length","indicator","columns","key","render","text","charAt","toUpperCase","dataIndex","dataSource","pagination","rowKey","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7a8da841.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Container = (props) => (\r\n    <div style ={{width: '1000px', margin: '0 auto', textAlign: 'center'}}>\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport Container from \"./Container\";\r\nimport {Button, Avatar} from \"antd\";\r\nimport './Footer.css';\r\n\r\nconst Footer = (props) => (\r\n    <div className='footer'>\r\n        <Container>\r\n            {props.numberOfStudents !== undefined ? <Avatar style={{backgroundColor:'#f56a00', marginRight: '5px'}} size='large'>{props.numberOfStudents}</Avatar> : null}\r\n            <Button onClick={() => props.handleAddStudentClickEvent()} type='primary'> Add new Student+</Button>\r\n        </Container>\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import fetch from 'unfetch';\r\n\r\nconst checkStatus = (response) => {\r\n    if (response.ok) {\r\n        return response;\r\n    } else {\r\n        let error = new Error(response.statusText);\r\n        error.response = response;\r\n        response.json().then((e) =>{\r\n            error.error = e;\r\n        });\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\nexport const getAllStudents = () => fetch('http://localhost:8080/api/v1/students').then(checkStatus);\r\n\r\nexport const addNewStudent = (student) => fetch('http://localhost:8080/api/v1/students', {\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    },\r\n    method: 'POST',\r\n    body: JSON.stringify(student)\r\n    }).then(checkStatus);","import React from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport {Input, Button, Tag} from 'antd';\r\nimport {addNewStudent} from \"../client\";\r\n\r\nconst inputFieldMargin = {marginBottom: '10px'};\r\nconst tagStyle = {backgroundColor: '#f50', color: '#fff', ...inputFieldMargin};\r\n\r\nconst AddStudentForm = (props) => (\r\n    <Formik\r\n        initialValues={{ firstName: '', lastName: '', gender: '', email: '' }}\r\n        validate={values => {\r\n            const errors = {};\r\n            if(!values.firstName) {\r\n                errors.firstName = 'Firstname required';\r\n            }\r\n            if(!values.lastName) {\r\n                errors.lastName = 'Lastname required';\r\n            }\r\n            if(!values.gender) {\r\n                errors.gender = 'Gender required';\r\n            } else if(!['MALE', 'male', 'FEMALE', 'female'].includes(values.gender)) {\r\n                errors.gender = 'Gender invalid';\r\n            }\r\n            if (!values.email) {\r\n                errors.email = 'Email required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\r\n                errors.email = 'Email invalid';\r\n            }\r\n            return errors;\r\n        }}\r\n        onSubmit={(student, { setSubmitting }) => {\r\n            addNewStudent(student)\r\n                .then(() => {props.onSuccess()})\r\n                .catch((err) => {props.onFailure(err)})\r\n                .finally(() => setSubmitting(false));\r\n        }}>\r\n        {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              submitForm,\r\n              isValid\r\n          }) => (\r\n            <form onSubmit={handleSubmit}>\r\n                <Input\r\n                    style={inputFieldMargin}\r\n                    name=\"firstName\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.firstName}\r\n                    placeholder='Firstname'\r\n                />\r\n                {errors.firstName && touched.firstName && <Tag style={tagStyle}>{errors.firstName}</Tag>}\r\n                <Input\r\n                    style={inputFieldMargin}\r\n                    name=\"lastName\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.lastName}\r\n                    placeholder='Lastname'\r\n                />\r\n                {errors.lastName && touched.lastName && <Tag style={tagStyle}>{errors.lastName}</Tag>}\r\n                <Input\r\n                    style={inputFieldMargin}\r\n                    name=\"gender\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.gender}\r\n                    placeholder='Gender'\r\n                />\r\n                {errors.gender && touched.gender && <Tag style={tagStyle}>{errors.gender}</Tag>}\r\n                <Input\r\n                    style={inputFieldMargin}\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.email}\r\n                    placeholder='Email'\r\n                />\r\n                {errors.email && touched.email && <Tag style={tagStyle}>{errors.email}</Tag>}\r\n                <Button onClick={() => submitForm()} type=\"submit\" disabled={isSubmitting | (touched && !isValid)}>\r\n                    Create Student\r\n                </Button>\r\n            </form>\r\n        )}\r\n    </Formik>\r\n);\r\n\r\n\r\nexport default AddStudentForm;","import {notification} from \"antd\";\r\n\r\nconst openNotification = (type, message, description) => {\r\n    notification[type]({\r\n        message,\r\n        description\r\n    });\r\n};\r\n\r\nexport const successNotification = (message, description) => {\r\n    openNotification('success', message, description);\r\n}\r\n\r\nexport const infoNotification = (message, description) => {\r\n    openNotification('info', message, description);\r\n}\r\n\r\nexport const warningNotification = (message, description) => {\r\n    openNotification('warning', message, description);\r\n}\r\n\r\nexport const errorNotification = (message, description) => {\r\n    openNotification('error', message, description);\r\n}","import React, {Component} from 'react';\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport './App.css';\nimport { getAllStudents } from './client';\nimport AddStudentForm from './forms/AddStudentForm';\nimport {Table, Avatar, Spin, Modal, Empty} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport {errorNotification} from \"./Notification\";\n\nclass App extends Component {\n\n  state = {\n    students: [],\n    isFetching: false,\n    isAddStudentModalVisible: false\n  }\n\n  componentDidMount() {\n    this.fetchStudents();\n  }\n\n  openAddStudentModalVisible = () => this.setState({isAddStudentModalVisible: true});\n\n  closeAddStudentModalVisible = () => this.setState({isAddStudentModalVisible: false});\n\n  fetchStudents = () => {\n    this.setState({\n        isFetching: true\n    });\n    getAllStudents()\n        .then( res => res.json()\n            .then(students => {\n              this.setState({\n                students: students,\n                isFetching: false\n              });\n        })).catch((error) => {\n            const message = error.error.message;\n            const status = error.error.httpStatus;\n            errorNotification(message, status);\n            this.setState({\n               isFetching: false\n            });\n        });\n  }\n\n  render() {\n    const {students, isFetching, isAddStudentModalVisible} = this.state;\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n    const commonElements = () => (\n        <div>\n            <Modal title='Add new Student' visible={isAddStudentModalVisible} onOk={this.closeAddStudentModalVisible} onCancel={this.closeAddStudentModalVisible} width={1000}>\n                <AddStudentForm\n                    onSuccess={() => {\n                    this.closeAddStudentModalVisible();\n                    this.fetchStudents();\n                    }}\n                    onFailure={(error) => {\n                        const message = error.error.message;\n                        const status = error.error.httpStatus;\n                        errorNotification(message, status);\n                    }}\n                />\n            </Modal>\n            <Footer numberOfStudents={students.length} handleAddStudentClickEvent={this.openAddStudentModalVisible}/>\n        </div>\n    );\n    if(isFetching) {\n        return (\n            <Container>\n                <Spin indicator={antIcon} />\n            </Container>\n        );\n    }\n\n    if(students && students.length) {\n\n\n      /*\n        return students.map((student, index) => {\n        return (\n            <div key={index}>\n              <h2>{student.studentId}</h2>\n              <p>{student.firstName}</p>\n              <p>{student.lastName}</p>\n              <p>{student.gender}</p>\n              <p>{student.email}</p>\n            </div>\n        );\n      });\n      */\n       const columns = [\n           {\n               title: '',\n               key: 'avatar',\n               render: (text, student) => (\n                   <Avatar size='large'>\n                       {`${student.firstName.charAt(0).toUpperCase()}${student.lastName.charAt(0).toUpperCase()}`}\n                   </Avatar>\n               )\n           },\n           {\n               title: 'Id from Student',\n               dataIndex: 'studentId',\n               key: 'studentId'\n           },\n           {\n               title: 'Firstname',\n               dataIndex: 'firstName',\n               key: 'firstName'\n           },\n           {\n               title: 'Lastname',\n               dataIndex: 'lastName',\n               key: 'lastName'\n           },\n           {\n               title: 'Gender',\n               dataIndex: 'gender',\n               key: 'gender'\n           },\n           {\n               title: 'Email',\n               dataIndex: 'email',\n               key: 'email'\n           }\n       ];\n       return (\n           <Container>\n               <Table dataSource={students} columns={columns} pagination={false} rowKey='studentId'/>\n               {commonElements()}\n           </Container>\n       );\n    }\n\n    return (\n        <Container>\n            <Empty description={<h1>No Students found</h1>}/>\n            {commonElements()}\n        </Container>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}